# This workflow handles the build and deployment process of the application to AWS
# It is triggered on pushes to the main branch and manages the CI/CD pipeline

name: Build project and push to ECR to begin deployment

on:
  push:
    branches: [ main ]  # Trigger workflow only on pushes to main branch

# Required permissions for AWS OIDC authentication
permissions:
  id-token: write  # Needed for AWS OIDC authentication
  contents: read   # Required to checkout repository

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository code
      - name: Checkout
        uses: actions/checkout@v2

      # Step 2: Setup Java environment
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'  # Eclipse Temurin distribution of OpenJDK

      # Step 3: Build application using Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests  # Builds the application, skipping tests for faster deployment

      # Step 4: Configure AWS credentials using OIDC provider
      # This is a secure way to authenticate with AWS without storing long-term credentials
      - name: Configure AWS credentials using OidcProvider
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}  # IAM role with necessary permissions
          aws-region: ${{ secrets.AWS_REGION }}              # Target AWS region

      # Step 5: Authenticate with Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 6: Retrieve deployment resources from CloudFormation ,Gets S3 bucket name and CodeDeploy configuration from CloudFormation outputs
      - name: Get Image Bucket name from CloudFormation
        id: get-bucket
        run: |
        # Get S3 bucket name from CloudFormation stack outputs
          BUCKET=$(aws cloudformation describe-stacks \
          --stack-name ${{ secrets.CFN_STACK_NAME }} \
          --query "Stacks[0].Outputs[?OutputKey=='ArtifactBucket'].OutputValue" \
          --output text)
        
          CODEDEPLOY_APP=$(aws cloudformation describe-stacks \
          --stack-name ${{ secrets.CFN_STACK_NAME }} \
          --query "Stacks[0].Outputs[?OutputKey=='CodeDeployApplication'].OutputValue" \
          --output text)
  
          CODEDEPLOY_DG=$(aws cloudformation describe-stacks \
          --stack-name ${{ secrets.CFN_STACK_NAME }} \
          --query "Stacks[0].Outputs[?OutputKey=='CodeDeployDeploymentGroup'].OutputValue" \
          --output text)
  
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
          echo "codedeploy_app=$CODEDEPLOY_APP" >> $GITHUB_OUTPUT
          echo "codedeploy_dg=$CODEDEPLOY_DG" >> $GITHUB_OUTPUT


      # Step 7: Package and upload deployment artifacts
      - name: zip appspec.yml and taskdef.json and push to s3
        run: |
        # Create deployment package
          zip deployment-files.zip appspec.yml taskdef.json
          
        # Upload to S3 bucket
          aws s3 cp deployment-files.zip s3://${{ steps.get-bucket.outputs.bucket }}/deployment-files.zip

      # Step 8: Build and push Docker image to ECR
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}  # Using git commit SHA as image tag
        run:  |
          echo "ECR_REGISTRY=$ECR_REGISTRY"
          echo "ECR_REPOSITORY=$ECR_REPOSITORY"
          echo "Building image"
        # Build Docker image with commit SHA tag
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # Tag image as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        # Push image with commit SHA tag to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # Push latest tag to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      # Step 9: Trigger deployment through AWS CodeDeploy
      - name: Create CodeDeploy deployment
        run: |
          echo "Triggering deployment..."
        # Create new deployment using the uploaded artifacts
          aws deploy create-deployment \
            --application-name ${{ steps.get-bucket.outputs.codedeploy_app }} \
            --deployment-group-name ${{ steps.get-bucket.outputs.codedeploy_dg }} \
            --s3-location bucket=${{ steps.get-bucket.outputs.bucket }},key=deployment-files.zip,bundleType=zip
